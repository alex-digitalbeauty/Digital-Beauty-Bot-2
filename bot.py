import os
from flask import Flask, request
import telebot
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∫—É—Ä—Å–∞
USD_UAH = 49

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìä –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–∫—É–ø–Ω—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É"),
        types.KeyboardButton("üë®‚Äçüíº –ó–≤ º—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    )
    return markup

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

# –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@bot.message_handler(func=lambda m: m.text == "üë®‚Äçüíº –ó–≤ º—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
def contact_manager(message):
    bot.send_message(message.chat.id, "–î–ª—è –∑–≤ º—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–∏—à—ñ—Ç—å —Å—é–¥–∏: @alex_digital_beauty")

# –í—ã–±–æ—Ä –∞–ø–ø–∞—Ä–∞—Ç–∞
@bot.message_handler(func=lambda m: m.text == "üìä –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–∫—É–ø–Ω—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É")
def choose_device(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("IPL A-Tone", "Finexel CO2", "10THERMA", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∞–ø–∞—Ä–∞—Ç:", reply_markup=markup)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –í–æ–ø—Ä–æ—Å—ã –ø–æ —à–∞–≥–∞–º
def ask_question_step(chat_id, step):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if step == 1:
        markup.add("27000‚Ç¨", "–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≤–∞—Ä—Ç—ñ—Å—Ç—å", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é")
        bot.send_message(chat_id, "–í–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É:", reply_markup=markup)
    elif step == 2:
        markup.add("200 –ø—Ä–æ—Ü–µ–¥—É—Ä", "–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é")
        bot.send_message(chat_id, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–∞ –º—ñ—Å—è—Ü—å:", reply_markup=markup)
    elif step == 3:
        markup.add("3500 –≥—Ä–Ω", "–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≤–∞—Ä—Ç—ñ—Å—Ç—å", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é")
        bot.send_message(chat_id, "–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:", reply_markup=markup)
    elif step == 4:
        markup.add("15% –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏", "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π %", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é")
        bot.send_message(chat_id, "–ó–∞—Ä–æ–±—ñ—Ç–Ω—è –ø–ª–∞—Ç–∞ —Ñ–∞—Ö—ñ–≤—Ü—è:", reply_markup=markup)
    user_data[chat_id]['step'] = step

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–∞
@bot.message_handler(func=lambda m: m.text in ["IPL A-Tone", "Finexel CO2", "10THERMA"])
def device_selected(message):
    chat_id = message.chat.id
    user_data[chat_id] = {"device": message.text}
    if message.text == "IPL A-Tone":
        ask_question_step(chat_id, 1)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
@bot.message_handler(func=lambda m: True)
def handle_answers(message):
    chat_id = message.chat.id

    # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞
    if message.text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é":
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu())
        user_data.pop(chat_id, None)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if chat_id not in user_data:
        return

    step = user_data[chat_id].get('step', 0)

    # –®–∞–≥ 1 ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–ø–∞—Ä–∞—Ç–∞
    if step == 1:
        if message.text == "27000‚Ç¨":
            user_data[chat_id]['cost'] = 27000
            ask_question_step(chat_id, 2)
        else:
            try:
                val = float(message.text.replace("‚Ç¨", ""))
                user_data[chat_id]['cost'] = val
                ask_question_step(chat_id, 2)
            except:
                bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (‚Ç¨):")
    # –®–∞–≥ 2 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ–¥—É—Ä
    elif step == 2:
        if message.text == "200 –ø—Ä–æ—Ü–µ–¥—É—Ä":
            user_data[chat_id]['count'] = 200
            ask_question_step(chat_id, 3)
        else:
            try:
                val = int(message.text)
                user_data[chat_id]['count'] = val
                ask_question_step(chat_id, 3)
            except:
                bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä:")
    # –®–∞–≥ 3 ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    elif step == 3:
        if message.text == "3500 –≥—Ä–Ω":
            user_data[chat_id]['price'] = 3500
            ask_question_step(chat_id, 4)
        else:
            try:
                val = float(message.text.replace("–≥—Ä–Ω","").replace(" ",""))
                user_data[chat_id]['price'] = val
                ask_question_step(chat_id, 4)
            except:
                bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–≥—Ä–Ω):")
    # –®–∞–≥ 4 ‚Äî –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    elif step == 4:
        if message.text == "15% –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏":
            user_data[chat_id]['salary_percent'] = 15
        else:
            try:
                val = float(message.text.replace("%",""))
                user_data[chat_id]['salary_percent'] = val
            except:
                bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ %:")
                return

        # –†–∞—Å—á–µ—Ç –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        cost_uah = user_data[chat_id]['cost'] * USD_UAH
        net_profit = (user_data[chat_id]['price'] * user_data[chat_id]['count']) - \
                     (user_data[chat_id]['price'] * user_data[chat_id]['salary_percent']/100 * user_data[chat_id]['count'])
        months = round(cost_uah / net_profit, 1)
        salary_per_procedure = user_data[chat_id]['price'] * user_data[chat_id]['salary_percent']/100

        text = f"""
IPL A-Tone
–í–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É: {user_data[chat_id]['cost']}‚Ç¨
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä –≤ –º—ñ—Å—è—Ü—å: {user_data[chat_id]['count']}
–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: {user_data[chat_id]['price']} –≥—Ä–Ω
–ó–∞—Ä–æ–±—ñ—Ç–Ω—è –ø–ª–∞—Ç–∞ —Ñ–∞—Ö—ñ–≤—Ü—è –∑–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É: {salary_per_procedure} –≥—Ä–Ω
–û–∫—É–ø–Ω—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É: {months} –º—ñ—Å—è—Ü—ñ–≤

–î–ª—è –∑–≤ º—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–∏—à—ñ—Ç—å —Å—é–¥–∏: @alex_digital_beauty
"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üë®‚Äçüíº –ó–≤ º—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é")
        bot.send_message(chat_id, text, reply_markup=markup)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        user_data.pop(chat_id, None)

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Render
@app.route("/")
def index():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ webhook!", 200

if __name__ == "__main__":
    RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
    bot.remove_webhook()
    bot.set_webhook(url=f"{RENDER_URL}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
